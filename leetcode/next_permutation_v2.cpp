#include<iostream>
#include<vector>
#include<string>

using namespace std;

class Solution{
    public:
        void reverse(vector<int>& v, int first)
        {
            int end   = v.size() - 1;
            while(first < end)
            {
                int tmp = v[first];
                v[first] = v[end];
                v[end] = tmp;
                first++; end--;
            }
        }

        // false: 6 5 4 
        // true : other cases
        bool helper(vector<int>& v, int first)
        {
            int i = v.size() - 1;
            while(i > first){
                if(v[first] < v[i]) break;
                i--;
            }

            if(i <= first) return false;
            else{
                int tmp = v[i];
                v[i] = v[first];
                v[first] = tmp;

                reverse(v, first+1);
                return true;
            }
        }

        // case: v0 v1 v2 v3 v4 v5 v6
        // helper(v, 4) -->check (v5 v6) if it not reach MAX
        // if return false
        //    helper(v, 3) -->check (v4 v5 v6) if it not reach MAX
        //    if return false
        //        helper(v, 2) -->check (v3, v4 v5 v6) if it not read MAX
        //    ....
        // else if return true
        //    exit and the nextPermutation has been generated by helper
        void nextPermutation(vector<int>& nums){
            for(int i = nums.size() - 2; i >= 0; i--){
                if(helper(nums, i) == true){
                    return;
                }
                else if(i == 0){
                    reverse(nums, 0);
                }
            }
        }
};

void printV(vector<int>& v)
{
    int s = v.size();
    for(int i = 0; i < s; i++)
        cout << v[i] << " ";
    cout << endl;
}

int main()
{
    Solution s;
    vector<int> v;
    v.push_back(1);
    v.push_back(3);
    v.push_back(2);
    s.nextPermutation(v);
    printV(v);
    
    return 0;
}
